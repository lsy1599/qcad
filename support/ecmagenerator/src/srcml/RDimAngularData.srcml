<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./entity" filename="RDimAngularData.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDimAngularData_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDimAngularData_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entity_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RArc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDimensionData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RLine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<comment type="block">/**
 * Angular dimension entity data base class.
 *
 * \scriptable
 * \abstract
 * \ingroup entity
 */</comment>
<class>class <macro><name>QCADENTITY_EXPORT</name></macro> <name>RDimAngularData</name><super>: <specifier>public</specifier> <name>RDimensionData</name></super> <block>{<private type="default">
    <decl_stmt><decl><type><name>friend</name> class</type> <name>RDimAngularEntity</name></decl>;</decl_stmt>

</private><protected>protected:
    <constructor_decl><name>RDimAngularData</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>RDimAngularData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</constructor_decl>

</protected><public>public:
    <constructor_decl><name>RDimAngularData</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RDimAngularData</name><parameter_list>(<param><decl><type><name>const</name> <name>RDimensionData</name>&amp;</type> <name>dimData</name></decl></param>)</parameter_list>;</constructor_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>EntityDimAngular</name></name></expr>;</return>
    }</block></function>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isSane</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setExtensionLine1End</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getExtensionLine1End</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setExtensionLine2End</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getExtensionLine2End</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setDimArcPosition</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getDimArcPosition</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>getReferencePoints</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>hint</name> =<init> <expr><name><name>RS</name>::<name>RenderTop</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>moveReferencePoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>referencePoint</name></decl></param>, 
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>targetPoint</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
    virtual bool move(const RVector&amp; offset);
    virtual bool rotate(double rotation, const RVector&amp; center);
    virtual bool scale(const RVector&amp; scaleFactors, const RVector&amp; center);
    virtual bool mirror(const RLine&amp; axis);
    */</comment>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getShapes</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name> =<init> <expr><name>RDEFAULT_RBOX</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>ignoreComplex</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>segment</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getAngle</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getAngles</name><parameter_list>(<param><decl><type><name>double</name>&amp;</type> <name>ang1</name></decl></param>, <param><decl><type><name>double</name>&amp;</type> <name>ang2</name></decl></param>,
                   <param><decl><type><name>bool</name>&amp;</type> <name>reversed</name></decl></param>,
                   <param><decl><type><name>RVector</name>&amp;</type> <name>p1</name></decl></param>, <param><decl><type><name>RVector</name>&amp;</type> <name>p2</name></decl></param>)</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getCenter</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getMeasuredValue</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QString</name></type> <name>getAutoLabel</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
</public>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDimAngularData*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RDimAngularData*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RDimAngularData&gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
