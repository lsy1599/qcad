// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaRefPoint.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaVector.h"
                 void REcmaRefPoint::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RRefPoint*) 0)));
        protoCreated = true;
    }

    
        // primary base class RVector:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RVector*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RVector
        REcmaHelper::registerFunction(&engine, proto, getRVector, "getRVector");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, isSecondary, "isSecondary");
            
            REcmaHelper::registerFunction(&engine, proto, setSecondary, "setSecondary");
            
            REcmaHelper::registerFunction(&engine, proto, isTertiary, "isTertiary");
            
            REcmaHelper::registerFunction(&engine, proto, setTertiary, "setTertiary");
            
            REcmaHelper::registerFunction(&engine, proto, isIgnore, "isIgnore");
            
            REcmaHelper::registerFunction(&engine, proto, setIgnore, "setIgnore");
            
            REcmaHelper::registerFunction(&engine, proto, isCenter, "isCenter");
            
            REcmaHelper::registerFunction(&engine, proto, setCenter, "setCenter");
            
            REcmaHelper::registerFunction(&engine, proto, isStart, "isStart");
            
            REcmaHelper::registerFunction(&engine, proto, setStart, "setStart");
            
            REcmaHelper::registerFunction(&engine, proto, isEnd, "isEnd");
            
            REcmaHelper::registerFunction(&engine, proto, setEnd, "setEnd");
            
            REcmaHelper::registerFunction(&engine, proto, isArrow, "isArrow");
            
            REcmaHelper::registerFunction(&engine, proto, setArrow, "setArrow");
            
            REcmaHelper::registerFunction(&engine, proto, setFlag, "setFlag");
            
            REcmaHelper::registerFunction(&engine, proto, getFlag, "getFlag");
            
            REcmaHelper::registerFunction(&engine, proto, getFlags, "getFlags");
            
            REcmaHelper::registerFunction(&engine, proto, setFlags, "setFlags");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RRefPoint*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RRefPoint
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, toVectorList, "toVectorList");
            
            REcmaHelper::registerFunction(&engine, &ctor, toRefPointList, "toRefPointList");
            

    // static properties:
    

    // enum values:
    

    ctor.setProperty("NoFlags",
    QScriptValue(RRefPoint::NoFlags),
    QScriptValue::ReadOnly);


    ctor.setProperty("Secondary",
    QScriptValue(RRefPoint::Secondary),
    QScriptValue::ReadOnly);


    ctor.setProperty("Tertiary",
    QScriptValue(RRefPoint::Tertiary),
    QScriptValue::ReadOnly);


    ctor.setProperty("Center",
    QScriptValue(RRefPoint::Center),
    QScriptValue::ReadOnly);


    ctor.setProperty("Ignore",
    QScriptValue(RRefPoint::Ignore),
    QScriptValue::ReadOnly);


    ctor.setProperty("Start",
    QScriptValue(RRefPoint::Start),
    QScriptValue::ReadOnly);


    ctor.setProperty("End",
    QScriptValue(RRefPoint::End),
    QScriptValue::ReadOnly);


    ctor.setProperty("Arrow",
    QScriptValue(RRefPoint::Arrow),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RRefPoint::Flag>(
        &engine,
        toScriptValueEnumFlag,
        fromScriptValueEnumFlag,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RRefPoint",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaRefPoint::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RRefPoint(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RRefPoint
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RVector */
            
                && (
                
                        context->argument(
                        1
                        ).isNumber()
                ) /* type: RRefPoint::Flags */
            
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RRefPoint: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    RRefPoint::Flags
                    a1 =
                    (RRefPoint::Flags)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RRefPoint
                    cppResult(
                    a0
        ,
    a1
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RVector */
            
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RRefPoint: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RRefPoint
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isNumber()
                ) /* type: double */
            
                && (
                
                        context->argument(
                        1
                        ).isNumber()
                ) /* type: double */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RRefPoint
                    cppResult(
                    a0
        ,
    a1
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        3
                && (
                
                        context->argument(
                        0
                        ).isNumber()
                ) /* type: double */
            
                && (
                
                        context->argument(
                        1
                        ).isNumber()
                ) /* type: double */
            
                && (
                
                        context->argument(
                        2
                        ).isNumber()
                ) /* type: double */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RRefPoint
                    cppResult(
                    a0
        ,
    a1
        ,
    a2
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        4
                && (
                
                        context->argument(
                        0
                        ).isNumber()
                ) /* type: double */
            
                && (
                
                        context->argument(
                        1
                        ).isNumber()
                ) /* type: double */
            
                && (
                
                        context->argument(
                        2
                        ).isNumber()
                ) /* type: double */
            
                && (
                
                        context->argument(
                        3
                        ).isBool()
                ) /* type: bool */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a3 =
                    (bool)
                    
                    context->argument( 3 ).
                    toBool();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RRefPoint
                    cppResult(
                    a0
        ,
    a1
        ,
    a2
        ,
    a3
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RRefPoint(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaRefPoint::getRVector(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RVector* cppResult =
                    qscriptvalue_cast<RRefPoint*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaRefPoint::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RRefPoint"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaRefPoint::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RVector");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaRefPoint::toVectorList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::toVectorList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::toVectorList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RRefPoint > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RRefPoint >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RVector >'
    QList < RVector > cppResult =
        RRefPoint::
       toVectorList(a0);
        // return type: QList < RVector >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.toVectorList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::toVectorList", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::toRefPointList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::toRefPointList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::toRefPointList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RVector > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RVector >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RRefPoint >'
    QList < RRefPoint > cppResult =
        RRefPoint::
       toRefPointList(a0);
        // return type: QList < RRefPoint >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QList < RVector > */
     && (
            context->argument(1).isNumber()
        ) /* type: RRefPoint::Flags */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RVector >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    RRefPoint::Flags
                    a1 =
                    (RRefPoint::Flags)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RRefPoint >'
    QList < RRefPoint > cppResult =
        RRefPoint::
       toRefPointList(a0
        ,
    a1);
        // return type: QList < RRefPoint >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.toRefPointList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::toRefPointList", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isSecondary
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isSecondary", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isSecondary";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isSecondary", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isSecondary();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isSecondary().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isSecondary", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setSecondary
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setSecondary", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setSecondary";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setSecondary", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSecondary(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setSecondary().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setSecondary", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isTertiary
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isTertiary", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isTertiary";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isTertiary", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isTertiary();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isTertiary().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isTertiary", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setTertiary
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setTertiary", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setTertiary";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setTertiary", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTertiary(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setTertiary().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setTertiary", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isIgnore
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isIgnore", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isIgnore";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isIgnore", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isIgnore();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isIgnore().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isIgnore", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setIgnore
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setIgnore", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setIgnore";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setIgnore", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setIgnore(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setIgnore().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setIgnore", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isCenter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isCenter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isCenter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isCenter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isCenter();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isCenter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isCenter", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setCenter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setCenter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setCenter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setCenter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCenter(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setCenter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setCenter", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isStart
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isStart", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isStart";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isStart", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isStart();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isStart().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isStart", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setStart
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setStart", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setStart";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setStart", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setStart(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setStart().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setStart", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isEnd
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isEnd", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isEnd";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isEnd", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isEnd();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isEnd().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isEnd", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setEnd
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setEnd", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setEnd";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setEnd", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setEnd(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setEnd().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setEnd", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::isArrow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::isArrow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::isArrow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("isArrow", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isArrow();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.isArrow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::isArrow", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setArrow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setArrow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setArrow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setArrow", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setArrow(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setArrow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setArrow", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setFlag
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setFlag", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setFlag";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setFlag", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RRefPoint::Flag */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RRefPoint::Flag*
                    ap0 =
                    qscriptvalue_cast<
                    RRefPoint::Flag*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RRefPoint: Argument 0 is not of type RRefPoint::Flag*.",
                               context);                    
                    }
                    RRefPoint::Flag& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFlag(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setFlag().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setFlag", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::getFlag
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::getFlag", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::getFlag";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("getFlag", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RRefPoint::Flag */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RRefPoint::Flag*
                    ap0 =
                    qscriptvalue_cast<
                    RRefPoint::Flag*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RRefPoint: Argument 0 is not of type RRefPoint::Flag*.",
                               context);                    
                    }
                    RRefPoint::Flag& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getFlag(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.getFlag().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::getFlag", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::getFlags
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::getFlags", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::getFlags";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("getFlags", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RRefPoint::Flags'
    RRefPoint::Flags cppResult =
        
               self->getFlags();
        // return type: RRefPoint::Flags
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.getFlags().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::getFlags", context, engine);
            return result;
        }
         QScriptValue
        REcmaRefPoint::setFlags
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaRefPoint::setFlags", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaRefPoint::setFlags";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RRefPoint* self = 
                        getSelf("setFlags", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RRefPoint::Flags */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RRefPoint::Flags
                    a0 =
                    (RRefPoint::Flags)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFlags(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RRefPoint.setFlags().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaRefPoint::setFlags", context, engine);
            return result;
        }
         QScriptValue REcmaRefPoint::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RRefPoint* self = getSelf("toString", context);
    
    QString result;
    
            QDebug d(&result);
            if (self!=NULL) {
                d << *self;
            }
            else {
                d << "NULL";
            }
        
    return QScriptValue(result);
    }
     QScriptValue REcmaRefPoint::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RRefPoint cp = qscriptvalue_cast<RRefPoint>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaRefPoint::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RRefPoint* self = getSelf("RRefPoint", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RRefPoint* REcmaRefPoint::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RRefPoint* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RRefPoint >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RRefPoint.%1(): "
                        "This object is not a RRefPoint").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RRefPoint* REcmaRefPoint::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RRefPoint* selfBase = getSelf(fName, context);
                RRefPoint* self = dynamic_cast<RRefPoint*>(selfBase);
                //return REcmaHelper::scriptValueTo<RRefPoint >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RRefPoint.%1(): "
                    "This object is not a RRefPoint").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaRefPoint::toScriptValueEnumFlag(QScriptEngine* engine, const RRefPoint::Flag& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaRefPoint::fromScriptValueEnumFlag(const QScriptValue& value, RRefPoint::Flag& out)
    
        {
            out = qvariant_cast<RRefPoint::Flag>(value.toVariant());
        }
        